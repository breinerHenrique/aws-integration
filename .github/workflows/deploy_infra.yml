name: Deploy INFRA on AWS

on: workflow_dispatch

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest

    permissions:
      id-token: write # This is required for requesting the JWT
      contents: read  # This is required for actions/checkout

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Configure AWS Credentials using OIDC
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: us-east-1
        role-to-assume: arn:aws:iam::236730285067:role/role_GitHubActionsIntegration  

    # Install the latest version of Terraform CLI
    - name: Setup Terraform Develop
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.1.7"

  terraform-plan:
    name: 'Terraform-Plan'
    runs-on: ubuntu-latest

    permissions:
      id-token: write # This is required for requesting the JWT
      contents: read  # This is required for actions/checkout

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
    
    steps:
    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init Develop - ECR
      run: |
        cd tf-aws-resources/develop/ecr
        terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format Develop - ECR
      run: |
        cd tf-aws-resources/develop/ecr
        terraform fmt

    # Generates an execution plan for Terraform
    - name: Terraform Plan Develop - ECR
      run: |
        cd tf-aws-resources/develop/ecr
        terraform plan

  manual-approval:
    name: Manual Approval
    runs-on: ubuntu-latest
    needs: terraform-plan
    if: success() # Only proceed if terraform-plan job succeeds
          
    permissions:
      issues: write
      
    steps:
    - name: Await Manual Approval
      uses: trstringer/manual-approval@v1
      with:
        secret: ${{ github.TOKEN }}
        approvers: breinerHenrique # Replace with GitHub usernames, with the free version you can only have an issue assigned to one username
        minimum-approvals: 1
        issue-title: "Manual Approval Required for Terraform Apply"
        issue-body: "Please approve or deny the deployment."

  terraform-apply:
    name: 'Terraform-Apply'
    runs-on: ubuntu-latest
    needs: manual-approval

    permissions:
      id-token: write # This is required for requesting the JWT
      contents: read  # This is required for actions/checkout

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
    
    steps:
    # Generates an execution plan for Terraform
    - name: Terraform Apply Develop - ECR
      run: |
        cd tf-aws-resources/develop/ecr
        terraform apply --auto-approve
        
    # # Generates an execution plan for Terraform
    # - name: Terraform Destroy Develop - ECR
    #   run: |
    #     cd tf-aws-resources/develop/ecr
    #     terraform destroy --auto-approve         
