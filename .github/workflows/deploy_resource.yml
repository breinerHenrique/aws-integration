name: Deploy resource to AWS

on: 
  workflow_dispatch

jobs:
  docker-build-push:
    name: "Docker Build"
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    outputs:
      image_tag: ${{ steps.build-publish.outputs.image_tag }}
      full_image: ${{ steps.build-publish.outputs.full_image }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Configure AWS Credentials using OIDC
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: us-east-1
        role-to-assume: arn:aws:iam::236730285067:role/role_GitHubActionsIntegration

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      with:
        registries: "236730285067"

    - name: Build, tag, and push image to Amazon ECR
      id: build-publish
      shell: bash
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: "intrack_mobile"
        IMAGE_TAG: ${{ github.ref_name }}-${{ github.run_number }}
      run: |
          docker build . -t "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          docker push "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          echo "IMAGE $IMAGE_TAG is pushed to $ECR_REGISTRY/$ECR_REPOSITORY"
          echo "image_tag=$IMAGE_TAG" 
          echo "full_image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          echo "full_image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "full_image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  create-aws-services:
    name: "Create IAM Role and Log Group"
    runs-on: ubuntu-latest
    needs: docker-build-push
    permissions:
      id-token: write
      contents: read
    outputs:
      log_group_exists: ${{ steps.check-log-group.outputs.log_group_exists }}
      role_exists: ${{ steps.check-role.outputs.role_exists }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: us-east-1
        role-to-assume: arn:aws:iam::236730285067:role/role_GitHubActionsIntegration

    - name: Check if IAM Role exists
      id: check-role
      run: |
        ROLE_NAME="ecsTaskExecutionRole"
        if aws iam get-role --role-name $ROLE_NAME > /dev/null 2>&1; then
          echo "role_exists=true" >> $GITHUB_OUTPUT
        else
          echo "role_exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Create IAM Role for ECS (if not exists)
      if: steps.check-role.outputs.role_exists == 'false'
      run: |
        aws iam create-role \
          --role-name ecsTaskExecutionRole \
          --assume-role-policy-document '{
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Service": "ecs-tasks.amazonaws.com"
                },
                "Action": "sts:AssumeRole"
              }
            ]
          }'
        echo "IAM Role ecsTaskExecutionRole created."

    - name: Attach Policy to Role
      if: steps.check-role.outputs.role_exists == 'false'
      run: |
        aws iam attach-role-policy \
          --role-name ecsTaskExecutionRole \
          --policy-arn arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        echo "Policy attached to ecsTaskExecutionRole."

    - name: Check if CloudWatch Log Group exists
      id: check-log-group
      run: |
        LOG_GROUP_NAME="/ecs/nginx"
        echo "Checking if CloudWatch Log Group $LOG_GROUP_NAME exists..."
        if aws logs describe-log-groups --log-group-name-prefix "$LOG_GROUP_NAME" | jq -e '.logGroups | length > 0' > /dev/null; then
          echo "log_group_exists=true" >> $GITHUB_OUTPUT
        else
          echo "log_group_exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Create CloudWatch Log Group (if not exists)
      if: steps.check-log-group.outputs.log_group_exists == 'false'
      run: |
        LOG_GROUP_NAME="/ecs/nginx"
        echo "Creating CloudWatch Log Group: $LOG_GROUP_NAME"
        aws logs create-log-group --log-group-name "$LOG_GROUP_NAME"
        aws logs put-retention-policy --log-group-name "$LOG_GROUP_NAME" --retention-in-days 7
        echo "CloudWatch Log Group $LOG_GROUP_NAME created with 7 days retention."        
  
  ecs-deploy:
    name: "Create a task definition and ECS service and deploy"
    needs: [docker-build-push, create-aws-services]
    runs-on: ubuntu-latest
    defaults: # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
      run:
        shell: bash
        working-directory: ecs-service-backend
    permissions:
      id-token: write
      contents: read

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Configure AWS Credentials using OIDC
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: us-east-1
        role-to-assume: arn:aws:iam::236730285067:role/role_GitHubActionsIntegration

    - name: Render ECS task definition
      id: render-task-def
      run: |
        LOG_GROUP_NAME="/ecs/nginx"
        jq --arg IMAGE_URI "${{ needs.docker-build-push.outputs.full_image }}" \
        --arg LOG_GROUP "$LOG_GROUP_NAME" \
        '.containerDefinitions[0].image=$IMAGE_URI |
        .containerDefinitions[0].logConfiguration.options."awslogs-group"=$LOG_GROUP' \
        task-definition.json > task-definition-updated.json
      
    - name: Register new ECS task definition
      id: register-task-def
      uses: aws-actions/amazon-ecs-deploy-task-definition@v2
      with:
        task-definition: ecs-service-backend/task-definition-updated.json
  
    - name: Check if ECS service exists
      id: check-service
      run: |
        SERVICE_NAME="nginx"
        CLUSTER_NAME="cluster-ecs-intrack"
        if aws ecs describe-services --cluster $CLUSTER_NAME --services $SERVICE_NAME | jq -e '.services | length > 0'; then
          echo "service_exists=true" >> $GITHUB_OUTPUT
        else
          echo "service_exists=false" >> $GITHUB_OUTPUT
        fi
  
    - name: Create ECS service if not exists
      if: steps.check-service.outputs.service_exists == 'false'
      run: |
        aws ecs create-service \
          --cluster cluster-ecs-intrack \
          --service-name nginx \
          --launch-type FARGATE \
          --task-definition ${{ steps.register-task-def.outputs.task-definition-arn }} \
          --desired-count 1 \
          --network-configuration file://network-configuration.json \
          --service-connect-configuration file://service-connect.json
  
    - name: Update ECS service (if exists)
      if: steps.check-service.outputs.service_exists == 'true'
      run: |
        aws ecs update-service \
          --cluster cluster-ecs-intrack \
          --service nginx \
          --launch-type FARGATE \
          --task-definition ${{ steps.register-task-def.outputs.task-definition-arn }} \
          --desired-count 1 \
          --network-configuration file://network-configuration.json \
          --service-connect-configuration file://service-connect.json